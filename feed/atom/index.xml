<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Coding for Good</title>
  <subtitle type="text">Technology in superhero style</subtitle>

  <updated>2012-06-04T14:24:47Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://filipovskii.github.com" />
  <id>http://filipovskii.github.com/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://filipovskii.github.com/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://filipovskii.github.com</uri>
    </author>
    <title type="html"><![CDATA[Calling last.fm with python]]></title>
    <link rel="alternate" type="text/html" href="http://filipovskii.github.com/2012/05/31/calling-last.fm-with-python" />
    <id>http://filipovskii.github.com/2012/05/31/calling-last.fm-with-python</id>
    <updated>2012-05-31T00:00:00Z</updated>
    <published>2012-05-31T00:00:00Z</published>
    <category scheme="http://filipovskii.github.com" term="python" />
    <summary type="html"><![CDATA[Calling last.fm with python]]></summary>
    <content type="html" xml:base="http://filipovskii.github.com/2012/05/31/calling-last.fm-with-python"><![CDATA[<p>Recently I had to get data for one of the projects. It's music-related webapp,
and we desperately needed some rock stars data in it. Well, maybe not so
desperately, but anyway. Just in time, my friend and colleague remembered about
<a href="last.fm">last.fm</a>. Yeah, they have tons of rock stars and .. well, free API.</p>
<p>API is really easy to use. In case you don't want to spend your time on
writing a client for it and you're using python, you can use mine. It's right
here, on <a href="https://github.com/filipovskii/lastfm-python-api">github</a>.</p>
<h2>Mechanica Viscera</h2>
<h4>Applying for API</h4>
<p>As I said, API is really simple and so is the client. Let me dive into details,
so it would be <em>deadly obvious</em>.</p>
<p>For using lastfm API, you have to somehow tell them about your app. Do it
by <a href="http://www.last.fm/api/account">applying to API account</a>. Once you're
done, you should have <code>API_KEY</code> and <code>API_SECRET</code>. Replace Xs in <code>api.py</code> with
given values. I'll show, why we need it later.</p>
<div class="pygments_monokai"><pre><span class="n">ROOT_URL</span> <span class="o">=</span> <span class="s">&#39;http://ws.audioscrobbler.com/2.0/&#39;</span>
<span class="n">API_KEY</span> <span class="o">=</span> <span class="s">&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;</span>
<span class="n">SECRET</span> <span class="o">=</span> <span class="s">&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;</span>
</pre></div>

<h4>Making unsigned calls</h4>
<p>To get data, that does not require any user confirmation, you should simply
send GET request with specific parameters. There is a function for building
URLs for such requests:</p>
<div class="pygments_monokai"><pre><span class="k">def</span> <span class="nf">_make_request_url</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Create URL for regular GET request&quot;&quot;&quot;</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">ROOT_URL</span> <span class="o">+</span> <span class="s">&#39;?&#39;</span>
    <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;format&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;json&#39;</span>
    <span class="n">url</span> <span class="o">+=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">url</span>
</pre></div>

<p>It creates an URL for GET request to ROOT_URL and maps all parameters,
passed to the function as request parameters. We are expecting JSON, that's
why <code>format</code> parameter is there.</p>
<p>To send request call this:</p>
<div class="pygments_monokai"><pre><span class="k">def</span> <span class="nf">_call_lastfm_api</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">**</span><span class="n">method_args</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Call lastfm method with given parameters, return result JSON&quot;&quot;&quot;</span>
    <span class="n">method_args</span><span class="p">[</span><span class="s">&#39;api_key&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">API_KEY</span>
    <span class="n">method_args</span><span class="p">[</span><span class="s">&#39;method&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">method_name</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">_make_request_url</span><span class="p">(</span><span class="o">**</span><span class="n">method_args</span><span class="p">)</span>
    <span class="n">response_str</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response_str</span><span class="p">)</span>
</pre></div>

<p>Yep, just pass <em>method_name</em>, <em>method_args</em> (except <code>api_key</code>, it's added
inside the function), and get JSON back..</p>
<p>Here are two examples, that use this functions: </p>
<div class="pygments_monokai"><pre><span class="k">def</span> <span class="nf">get_top_artists_for_user</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Call *user.getTopArtists* method.</span>

<span class="sd">    Description: http://www.last.fm/api/show/user.getTopArtists</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">_call_lastfm_api</span><span class="p">(</span><span class="s">&#39;user.getTopArtists&#39;</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_artist_info</span><span class="p">(</span><span class="n">artist_name</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Call *artist.getInfo* method.</span>
<span class="sd">    </span>
<span class="sd">    Description: http://www.last.fm/api/show/artist.getInfo</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">_call_lastfm_api</span><span class="p">(</span><span class="s">&#39;artist.getInfo&#39;</span><span class="p">,</span>
                            <span class="c"># non-ascii chars not supported..</span>
                            <span class="n">artist</span><span class="o">=</span><span class="n">artist_name</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">))</span>
</pre></div>

<h4>User authorization</h4>
<p>I did not use any method in the API, that require authorization,
but here is some code, so you could do it.</p>
<p>First, you have to create a session for user. There is a <code>create_session()</code>
method for that. The most valuable part of it looks like this:</p>
<div class="pygments_monokai"><pre><span class="n">token_url</span> <span class="o">=</span> <span class="n">_make_request_url</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">&#39;auth.gettoken&#39;</span><span class="p">,</span>
                          <span class="n">api_key</span><span class="o">=</span><span class="n">API_KEY</span><span class="p">)</span>
<span class="n">token_response</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">token_url</span><span class="p">)</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">token_response</span><span class="o">.</span><span class="n">read</span><span class="p">())[</span><span class="s">&#39;token&#39;</span><span class="p">]</span>

<span class="n">webbrowser</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;http://www.last.fm/api/auth/?api_key={}&amp;token={}&#39;</span>
            <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">API_KEY</span><span class="p">,</span> <span class="n">token</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">&#39;Authorize request in your browser, then press Enter&#39;</span><span class="p">)</span>
<span class="nb">raw_input</span><span class="p">()</span>

<span class="n">session_req_url</span> <span class="o">=</span> <span class="n">_make_signed_request_url</span><span class="p">(</span>
    <span class="n">method</span><span class="o">=</span><span class="s">&#39;auth.getsession&#39;</span><span class="p">,</span>
    <span class="n">token</span><span class="o">=</span><span class="n">token</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">API_KEY</span><span class="p">)</span>

<span class="n">session_response</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">session_req_url</span><span class="p">)</span>
</pre></div>

<p>Here is what happening step by step:</p>
<ol>
<li>Get <em>token</em> from lastfm. Token is a temporary artifact, needed to
    distinguish session requests.</li>
<li>Using this token, request user approval, by pointing him to the browser.</li>
<li>Once user approved it, we can request <em>session_key</em>. This key can be used
    to make requests on behalf of user and has no expiration date.</li>
</ol>
<p>There is also some code, that deals with saving and reading <em>session_key</em> and
lastfm <em>username</em> from file. It's not very interesting, so I'll just skip it.</p>
<h4>Making signed calls</h4>
<p>Signing requests in terms of lastfm API is passing one more parameter to
server. Parameter is called <code>api_sig</code> and is md5 hashsum of all other request
parameters concatenated in one string with <code>API_SECRET</code> in the end
(like Name1Value1Name2Value2API_SECRET).</p>
<p>Here is how it can be done:</p>
<div class="pygments_monokai"><pre><span class="k">def</span> <span class="nf">_make_signed_request_url</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Create URL for signed GET request</span>
<span class="sd">    </span>
<span class="sd">    More on this: http://www.last.fm/api/authspec</span>
<span class="sd">    (see `8. Signing Calls`)</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">md5</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">md5</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s">&#39;{}{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">[</span><span class="n">key</span><span class="p">]))</span>
    <span class="n">md5</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">SECRET</span><span class="p">)</span>
    <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;api_sig&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">md5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">_make_request_url</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</pre></div>

<p>You can use this method instead of <code>_make_request_url</code> in <code>call_lastfm_api</code> to
make signed calls to API.</p>
<h4>That's all, folks!</h4>
<p>Feel free to contact me if you have any questions.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://filipovskii.github.com</uri>
    </author>
    <title type="html"><![CDATA[It's on!]]></title>
    <link rel="alternate" type="text/html" href="http://filipovskii.github.com/2012/04/01/it's-on!" />
    <id>http://filipovskii.github.com/2012/04/01/it's-on!</id>
    <updated>2012-04-01T00:00:00Z</updated>
    <published>2012-04-01T00:00:00Z</published>
    <category scheme="http://filipovskii.github.com" term="Blogging" />
    <summary type="html"><![CDATA[It's on!]]></summary>
    <content type="html" xml:base="http://filipovskii.github.com/2012/04/01/it's-on!"><![CDATA[<p>In life of every developer there is a time, when you are no longer able to keep all that crap in mind. Algorithms and data structures, programming languages, frameworks and methodologies, VIM hotkeys, grocery lists ... aggrhh!! In such moments you either have to get rid of part of the knowledge, or come up with new ways of arranging and storing it. There are 2-3 workbooks in my backpack for such case in my backpack all the time, scribbled with fragments of lectures, problem solvings, pieces of code and simple discussions about the nature of all things. And it solves some part of the problem. But workbooks wear out, burn and sometimes dissapear for no reason.. Things get even worth if you want to share the knowledge with somebody. So, sooner or later, every developer starts a blog. Same happened to me this spring.</p>
<p>Of course, there are dozens of specialized resources, like <code>livejournal</code> or <code>wordpress</code>. But didn't want to mess with those: design is typically overloaded, you have to make it up with ads or get a paid account. This is not a geek-way. So I've decided to make it all by myself. I'll show you how further. Here is the stack, I've used:</p>
<ul>
<li><a href="http://www.blogofile.com/">blogofile</a> python-powered site compiler</li>
<li><a href="http://html5boilerplate.com/">html5 boilerplate</a> HTML/CSS/JS template</li>
<li><a href="http://twitter.github.com/bootstrap/">twitter bootstrap</a> my favourite CSS framework</li>
<li><a href="http://pages.github.com/">github pages</a> free hosting</li>
</ul>
<h2>Blogofile</h2>
<p>Blogofile is a static site compiler, initially made up for blogs. It comes with such tasty things as <a href="http://daringfireball.net/projects/markdown/">markdown</a> (textile, reStructuredText) markup, <a href="http://disqus.com/">disqus</a> comment system, syntax highlighting and lots more out of the box. There will be even more in the <a href="http://www.blogofile.com/blog/2011/04/30/preview-of-blogofile-0.8/">next version</a>. Furthermore, it has nice and clean API, so there will be no problems in adding new functions. Simple blog, generated by <code>blogofile init simple blog</code> has the <a href="https://github.com/filipovskii/filipovskii.github.com/tree/blogofile_init/src">following structure</a>:</p>
<pre><code>.
├── _config.py
├── _controllers
│   ├── blog
│   │   ├── chronological.py
│   │   ...
│   │   └── post.py
│   └── org.py
├── _filters
│   ├── markdown_template.py
│   ...
│   └── textile_template.py
├── index.html.mako
├── _posts
│   ├── 001 - post 1.markdown
|   ...
│   └── 008 - post 8 - syntax highlight.markdown
└── _templates
    ├── atom.mako
    ...
    └── site.mako
</code></pre>
<ul>
<li>
<p>Everything should be clear with <em>posts</em>. They contain yaml-header and some content, written with your favourite markup language.</p>
</li>
<li>
<p><em>Controllers</em> generate static content. Suppose you want a page, that will contain a sequence of blog posts, listed in reverse chronological order, paginated 5 posts per page - that what <em>controller</em> should be written for. And in a simple blog, we already have that one - <code>chronological.py</code>.</p>
</li>
<li>
<p><em>Filters</em> are methods of transforming content. E.g. <code>markdown_template.py</code> converts markdown markup into html.</p>
</li>
<li>
<p><em>Templates</em> define site appearence. Blogofile uses <a href="http://www.makotemplates.org/">Mako</a> for this.</p>
</li>
<li>
<p><em>_config.py</em> contains site preferences. For example, <a href="http://www.disqus.com">disqus</a> should be turned on there.</p>
</li>
</ul>
<h2>html5 boilerplate and twitter bootstrap</h2>
<p>This tools are way more popular than blogofile, so I won't tell much about them. You can read about <code>html5 boilerplate</code> on <a href="http://html5boilerplate.com/">there site</a>. And <a href="https://github.com/filipovskii/filipovskii.github.com/tree/boilerplate">here</a> is a github branch with the result of adding it to the blog.</p>
<p><code>Bootstrap</code> is also <a href="http://twitter.github.com/bootstrap/">very well documented</a>, easy to use and customize. Grab the <a href="https://github.com/filipovskii/filipovskii.github.com/tree/bootstrap">branch</a>.</p>
<h2>Github pages</h2>
<p><a href="http://pages.github.com/">Github pages</a> is a free hosting of static content. Idea behind the project is to give an opportunity to place some info about you or your GitHub project. It supports <a href="https://github.com/mojombo/jekyll">Jekyll</a>, another static site compiler, by default. This one is written in Ruby and is definitely worth a look.</p>
<p>Service can be used for user and project pages. In order to create user page, you have to make a repo with the name like <code>[your-github-username].github.com</code>, commit file <code>index.html</code> to its master branch and push it to GitHub. Over time, this file will be published here: <code>http://[your-github-username].github.com/</code>.</p>
<p>Project page can be created with generator, or manually by creating <code>gh-pages</code> branch of your project.</p>
<p>You can learn more about this project <a href="http://help.github.com/pages/">here</a>.</p>
<h2>Instead of conclusion</h2>
<p>I've found, what I was looking for. With given stack, it became possible to create simple, customizable, cute blog. My future plans are to learn this thing to generate <code>pdf</code>, <code>epub</code> or <code>mobi</code> content, work on it's design and, hopefully, start writing regularly. But for now, it had been much more interesting to create this blog, then to write something in it ... maybe blogging is not for me..?</p>]]></content>
  </entry>
</feed>
